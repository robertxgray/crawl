This document explains how to build DCSS for Android, and some of the
technical details.


Introduction
------------
DCSS for Android employs SDL2's native support for Android applications;
it is currently built against a distribution of  SDL2 v2.0.3 with some
homegrown patches to allow it to interact with high resolution screens
correctly. As with most Android applications, the build process is
somewhat different from the traditional "./configure; make; make install"
that you might expect.

The Android port is known to build with the SDK for Android 11 (API level 30)
and NDK version r22b.


Build Process
-------------
 * Download and install Android Studio or the command line tools:
   https://developer.android.com/studio/
 * Use Android Studio or sdkmanager to install the latest Android SDK and NDK.
 * Enter the path to your installed SDK in the local.properties file:
   crawl/crawl-ref/source/android-project/local.properties
 * Ensure that you have all of the dependent host libraries required to
   use the SDK, NDK and build crawl's host tools. For a recent Ubuntu host
   these are:
     - ia32-libs
     - build-essential
     - libpng-dev
 * Run "make ANDROID=1 android". Note that the code will be built for every
   ABI (Application Binary Interface) supported by Android, so expect a long
   compilation time.

This procedure will create a debug apk, only installable in devices with
developer mode enabled. Release versions need to be signed using a
certificate.


Android Studio
--------------
Once all the required folders have been generated in the build process, you
can use Android Studio for further development or publishing. Just open the
project folder located in
crawl-ref/source/android-project


Technical Notes
---------------
 * The external libraries that Crawl needs to build against are pulled from
   the same "contrib" repositories that Win32 and OS X builds of Crawl
   use.
 * There are lots of Android specifics in the Makefile, because (a) the
   custom toolchain needs lots of CFLAGS and LDFLAGS to work properly
   and (b) the target paths for the data directory are completely
   different to where the "executable" lives on Android, and also
   completely different to the host OS.
 * The majority of the changes to the DCSS code are changing GLES calls
   so that they work correctly with Android's GLES implementation and
   integrate properly with the Java-side SDL.
 * The rltiles/ tools get compiled using native tools, not the NDK ones.
